// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/port/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/hugosrc/shortlink/internal/core/domain"
)

// MockLinkRepository is a mock of LinkRepository interface.
type MockLinkRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLinkRepositoryMockRecorder
}

// MockLinkRepositoryMockRecorder is the mock recorder for MockLinkRepository.
type MockLinkRepositoryMockRecorder struct {
	mock *MockLinkRepository
}

// NewMockLinkRepository creates a new mock instance.
func NewMockLinkRepository(ctrl *gomock.Controller) *MockLinkRepository {
	mock := &MockLinkRepository{ctrl: ctrl}
	mock.recorder = &MockLinkRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinkRepository) EXPECT() *MockLinkRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLinkRepository) Create(ctx context.Context, link *domain.Link) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, link)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockLinkRepositoryMockRecorder) Create(ctx, link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLinkRepository)(nil).Create), ctx, link)
}

// Delete mocks base method.
func (m *MockLinkRepository) Delete(ctx context.Context, hash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, hash)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockLinkRepositoryMockRecorder) Delete(ctx, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockLinkRepository)(nil).Delete), ctx, hash)
}

// FindByHash mocks base method.
func (m *MockLinkRepository) FindByHash(ctx context.Context, hash string) (*domain.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHash", ctx, hash)
	ret0, _ := ret[0].(*domain.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHash indicates an expected call of FindByHash.
func (mr *MockLinkRepositoryMockRecorder) FindByHash(ctx, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHash", reflect.TypeOf((*MockLinkRepository)(nil).FindByHash), ctx, hash)
}

// Update mocks base method.
func (m *MockLinkRepository) Update(ctx context.Context, hash, url string) (*domain.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, hash, url)
	ret0, _ := ret[0].(*domain.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockLinkRepositoryMockRecorder) Update(ctx, hash, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockLinkRepository)(nil).Update), ctx, hash, url)
}
